{"ast":null,"code":"// validation.js\n\nexport function validateEmail(email) {\n  // Validar que el nombre de usuario no esté vacío\n  if (!email) {}\n\n  // Validar que el nombre de usuario no tenga más de 35 caracteres\n  if (email.length > 35) {\n    return \"No puede ser mayor a 35 caracteres.\";\n  }\n\n  // Validar que el nombre de usuario sea un email utilizando una expresión regular\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    return \"Ingrese un email válido.\";\n  }\n\n  // Si pasa todas las validaciones, retorna null para indicar que el email es válido\n  return null;\n}\nexport function validatePassword(password) {\n  // Validar que la contraseña no esté vacía\n  if (!password) {\n    return \"La contraseña no puede estar vacía.\";\n  }\n\n  // Validar que la contraseña tenga una longitud entre 6 y 10 caracteres\n  if (password.length < 6 || password.length > 10) {\n    return \"La contraseña debe tener entre 6 y 10 caracteres.\";\n  }\n\n  // Validar que la contraseña contenga al menos un número utilizando una expresión regular\n  const numberRegex = /\\d/;\n  if (!numberRegex.test(password)) {\n    return \"La contraseña debe contener al menos un número.\";\n  }\n\n  // Si pasa todas las validaciones, retorna null para indicar que la contraseña es válida\n  return null;\n}","map":{"version":3,"names":["validateEmail","email","length","emailRegex","test","validatePassword","password","numberRegex"],"sources":["D:/Users/Jorhe/Documents/IMPORTANTE/rick_and_morty/client/src/components/Form/validation.js"],"sourcesContent":["// validation.js\r\n\r\nexport function validateEmail(email) {\r\n    // Validar que el nombre de usuario no esté vacío\r\n    if (!email) {\r\n    }\r\n  \r\n    // Validar que el nombre de usuario no tenga más de 35 caracteres\r\n    if (email.length > 35) {\r\n      return \"No puede ser mayor a 35 caracteres.\";\r\n    }\r\n  \r\n    // Validar que el nombre de usuario sea un email utilizando una expresión regular\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return \"Ingrese un email válido.\";\r\n    }\r\n  \r\n    // Si pasa todas las validaciones, retorna null para indicar que el email es válido\r\n    return null;\r\n  }\r\n\r\n  export function validatePassword(password) {\r\n    // Validar que la contraseña no esté vacía\r\n    if (!password) {\r\n      return \"La contraseña no puede estar vacía.\";\r\n    }\r\n  \r\n    // Validar que la contraseña tenga una longitud entre 6 y 10 caracteres\r\n    if (password.length < 6 || password.length > 10) {\r\n      return \"La contraseña debe tener entre 6 y 10 caracteres.\";\r\n    }\r\n  \r\n    // Validar que la contraseña contenga al menos un número utilizando una expresión regular\r\n    const numberRegex = /\\d/;\r\n    if (!numberRegex.test(password)) {\r\n      return \"La contraseña debe contener al menos un número.\";\r\n    }\r\n  \r\n    // Si pasa todas las validaciones, retorna null para indicar que la contraseña es válida\r\n    return null;\r\n  }"],"mappings":"AAAA;;AAEA,OAAO,SAASA,aAAaA,CAACC,KAAK,EAAE;EACjC;EACA,IAAI,CAACA,KAAK,EAAE,CACZ;;EAEA;EACA,IAAIA,KAAK,CAACC,MAAM,GAAG,EAAE,EAAE;IACrB,OAAO,qCAAqC;EAC9C;;EAEA;EACA,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE;IAC3B,OAAO,0BAA0B;EACnC;;EAEA;EACA,OAAO,IAAI;AACb;AAEA,OAAO,SAASI,gBAAgBA,CAACC,QAAQ,EAAE;EACzC;EACA,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,qCAAqC;EAC9C;;EAEA;EACA,IAAIA,QAAQ,CAACJ,MAAM,GAAG,CAAC,IAAII,QAAQ,CAACJ,MAAM,GAAG,EAAE,EAAE;IAC/C,OAAO,mDAAmD;EAC5D;;EAEA;EACA,MAAMK,WAAW,GAAG,IAAI;EACxB,IAAI,CAACA,WAAW,CAACH,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC/B,OAAO,iDAAiD;EAC1D;;EAEA;EACA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}